#version 450
// ------------  --------------


struct Camera{
    mat4 view;
    mat4 viewInv;
    mat4 proj;
    mat4 projInv;
    mat4 viewproj;
    vec3 position;
    float tanHalfFOV;
};
struct Ray{
    vec3 orig;
    vec3 dir;
};
struct Sphere{
    vec3 pos;
    float r;
};




vec3 at(Ray r, float t){
    return r.orig + t*r.dir;
}

layout(set = 0, binding = 0) uniform UniformBufferObject {
    Camera camera;
} ubo;

layout(set = 1, binding = 0, rgba8) uniform writeonly image2D outputImage;

layout(set = 1, std140, binding = 1) buffer ParticleSSBOOut {
    Sphere spheres[];
};

layout(local_size_x = 16, local_size_y = 16) in;





bool hit_sphere(const vec3 center, float radius, const Ray r){
    vec3 oc = center - r.orig;
    float a = dot(r.dir,r.dir);
    float b = -2.0 * dot(r.dir,oc);
    float c = dot(oc,oc) - radius*radius;
    float discriminant = b*b - 4*a*c;
    return discriminant >= 0;
}

vec4 ray_color(Ray r){
    

    for(int i = 0; i< spheres.length(); i++){
        if(hit_sphere(spheres[i].pos,spheres[i].r,r)){
            return vec4(1.0-float(i)/float(spheres.length()), 0.0, 0.0, 1.0);
        }
    }


    vec3 dir_unit = normalize(r.dir);
    float a = 0.5*(dir_unit.y + 1.0);
    return (1.0-a)*vec4(0.286, 0.365, 0.631, 1.0) + a*vec4(1.0, 1.0, 1.0, 1.0);
}






void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(outputImage);
    float aspectRatio = float(imageSize.x)/float(imageSize.y);

    float ndcX = 2.0 * pixelCoords.x / imageSize.x - 1.0;
    float ndcY = 1.0 - 2.0 * pixelCoords.y / imageSize.y;


    vec3 rayDirCameraSpace = normalize(vec3(
        ndcX * aspectRatio * ubo.camera.tanHalfFOV,
        ndcY * ubo.camera.tanHalfFOV,
        -1.0
    ));

    vec3 rayDir = normalize(vec3(ubo.camera.viewInv * vec4(rayDirCameraSpace, 0.0)));


    Ray ray;
    ray.orig = ubo.camera.position;
    ray.dir = rayDir;

    vec4 color = ray_color(ray);
    //color.w = color.x*color.y*color.z;
    
    imageStore(outputImage, pixelCoords, color.zyxw);

}