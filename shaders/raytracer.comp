#version 450

// ------------ Scene and camera --------------

struct Camera{
    vec3 location;
    vec3 direction;
};


// ------------ RAY --------------
struct Ray{
    vec3 orig;
    vec3 dir;
};

vec3 at(Ray r, float t){
    return r.orig + t*r.dir;
}

vec4 ray_color(Ray r){
    vec3 dir_unit = normalize(r.dir);
    float a = 0.5*(dir_unit.y + 1.0);
    return (1.0-a)*vec4(1.0,1.0,1.0,1.0) + a*vec4(0.5,0.7,1.0,1.0);
}


struct dummy{
    vec2 x;
};



layout(set = 0, binding = 0) uniform UniformBufferObject {
    Camera camera;
} ubo;

layout(set = 1, binding = 0, rgba8) uniform writeonly image2D outputImage;

layout(set = 1, std140, binding = 1) buffer ParticleSSBOOut {
   dummy dummyVec[ ];
};

layout(local_size_x = 16, local_size_y = 16) in;

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(outputImage);

    float viewport_height = 2.0;
    float focal_length = 1.0;
    float viewport_width = viewport_height * imageSize.x/imageSize.y;

    vec3 viewport_u = vec3(viewport_width,0,0);
    vec3 viewport_v = vec3(0,-viewport_height,0);

    vec3 pixel_delta_u = viewport_u / imageSize.x;
    vec3 pixel_delta_v = viewport_v / imageSize.y;

    vec3 viewport_upper_left = ubo.camera.location - vec3(0.0,0.0,1.0) - viewport_u/2 - viewport_v/2;

    vec3 pixel_loc = viewport_upper_left + (pixelCoords.x+0.5)*pixel_delta_u + (pixelCoords.y+0.5)*pixel_delta_v;

    vec3 ray_dir = pixel_loc - ubo.camera.location;

    Ray ray;
    ray.orig = ubo.camera.location;
    ray.dir = ray_dir;

    vec4 color = ray_color(ray);
    //color.w = color.x*color.y*color.z;
    
    imageStore(outputImage, pixelCoords, color.zyxw);

}