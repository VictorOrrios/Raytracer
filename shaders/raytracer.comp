#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_float64 : enable

#define PI 3.14159265359
#define FLT_MIN 1.175494e-38
#define AIR_REF_INDEX 1.000293

#define DIFFUSE         0
#define SUBSURFACE      1
#define SPECULAR        2
#define METAL           3
#define TRANSMISSION    4
#define EMISSION        5
#define TRANSPARENT     6
#define VOID            7

#define AMBIENT         0
#define SPHERE          1
#define POINT           2
#define DIRECTIONAL     3
#define CONE            4
#define AREA            5



// ------------ Struct definitions --------------
struct Camera{
    mat4 view;
    mat4 viewInv;
    mat4 proj;
    mat4 projInv;
    mat4 viewproj;
    vec3 position;
    float tanHalfFOV;
};

struct Ray{
    vec3 orig;
    vec3 dir;
};

struct Interval{
    float minV;
    float maxV;
};

struct Light{
    vec4 pos_angle_aux;
    vec4 color_str;
    int type;
    float accumulated_str;
};

struct Material{
    vec4 albedo;            // Surface color rgb. Alpha controls opacity: 0.0 = transparent 1.0 = opaque

    // Subsurface | Method: Christensen-Burley
    vec4 subsurface;        // Average distance the ligths scatter below the surface
                            // Alpha controls weight: 0.0 = diffuse , 1.0 = subsurface

    // Specular | Method: GGX
    vec4 specular_tint;     // Color tint for specular and metalic relfections
                            // Alpha controls IOR Level: 
                            // 0.0 = no reflections , 0.5 = no adjustment, 1.0 = double reflections

    // Emission
    vec4 emission_color;    // Color of the light emited. Alpha controls strength

    // General
    float roughness;        // 0.0 = smooth , 1.0 = rough
    float metallic;         // 0.0 = dielectric , 1.0 = metalic
    float ior;              // Index of refraction

    // Transmission
    float trs_weight;       // 0.0 = opaque , 1.0 = transmisive

    // Coat
    // TODO

    // Sheen
    // TODO
};

struct Sphere{
    vec3 pos; // Coordinates of the center
    float r; // Radius
    int mat; // Material index
};

struct Hit{
    vec3 p; // Where it happend
    vec3 normal; // The normal where it hit
    int mat; // Material index of the object it hit
    float t; // The distance from the ray origin to the hit
    bool front_face; // True if hit is to a front facing surface
};

// ------------ Constant definitions --------------
const int rays_per_pixel = 5;
const int max_bounces = 20;


const float PINF = 1.0 / 0.0;
const float NINF = -1.0 / 0.0;
const Interval empty_interval = Interval(PINF, NINF);
const Interval universe_interval = Interval(NINF, PINF);

// ------------ External memory layout --------------
layout(push_constant) uniform PushConstants {
    float time;
    uint frameCount;
    int total_lights;
    float lights_strength_sum;
    vec3 world_up;
    bool reset_frame_accumulation;
} pc;

layout(set = 0, binding = 0) uniform UniformBufferObject {
    Camera camera;
} ubo;

layout(set = 1, binding = 0, rgba8) uniform writeonly image2D outputImage;

layout(set = 1, std430, binding = 1) buffer SpheresSSBOOut {
    Sphere spheres[];
};

layout(set = 1, std430, binding = 2) buffer MaterialsSSBOOut {
    Material materials[];
};

layout(set = 1, std430, binding = 3) buffer LightsSSBOOut {
    Light lights[];
};

layout(set = 2, std430, binding = 0) buffer ColorAccumulationSSBOInOut {
    vec4 accumulated_colors[];
};

layout(set = 2, std430, binding = 1) buffer SampleCountSSBOInOut {
    int sample_counts[];
};

// ------------ Workgroup sizes --------------
layout(local_size_x = 32, local_size_y = 32) in;

// Global variables
ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
ivec2 imageSize = imageSize(outputImage);
float aspectRatio = float(imageSize.x)/float(imageSize.y);

uint seed;


// ------------ RNG functions --------------
uint hash(uint x) {
    x ^= x >> 16;
    x *= 0x7feb352dU;
    x ^= x >> 15;
    x *= 0x846ca68bU;
    x ^= x >> 16;
    return x;
}

uint xorshift(inout uint state) {
    state ^= state << 13;
    state ^= state >> 17;
    state ^= state << 5;
    return state;
}

float random(){
    return float(xorshift(seed)) / 4294967295.0; // Dividir por 2^32 - 1
}

float random_bound(float minV, float maxV){
    return minV + (maxV-minV)*random();
}

vec3 randomVec(){
    return vec3(random(),random(),random());
}

vec3 random_vec_bound(float minV, float maxV){
    return vec3(random_bound(minV,maxV),random_bound(minV,maxV),random_bound(minV,maxV));
}

vec3 random_unit_vec(){
    float phi = 2.0 * PI * random();
    float theta = acos(2.0 * random() - 1.0);
    float sin_theta = sin(theta);
    return vec3(
        sin_theta * cos(phi),
        sin_theta * sin(phi),
        cos(theta)
    );
}

vec3 random_vec_on_hemisphere(vec3 normal){
    vec3 rvec = random_unit_vec();
    if(dot(rvec,normal) > 0.0){
        return rvec;
    }else{
        return -rvec;
    }
}

vec2 sample_square(){
    return vec2(random()-0.5,random()-0.5);
}

// ------------ vec3 functions --------------
bool near_zero(const vec3 v){
    return (FLT_MIN > v.x) && (FLT_MIN > v.y) && (FLT_MIN > v.z);
}


// ------------ Ray functions --------------
// Having the length of a hit (t) returns the point where it hit
vec3 at(const Ray r, const float t){
    return r.orig + t*r.dir;
}

vec3 lambertian_diffuse(const vec3 normal){
    return normalize(normal + random_unit_vec());
}


// ------------ Interval functions --------------
bool contains(Interval i, float x){
    return i.minV <= x && i.maxV >= x;
}
bool surrounds(Interval i, float x){
    return i.minV < x && i.maxV > x;
}
float clamp_interval(Interval i, float x){
    if(x < i.minV) return i.minV; 
    if(x > i.maxV) return i.maxV;
    return x;
}

// ------------ Hit record functions --------------
// Having the outward facing normal of the surface hit
// updates the record frontFace and normal to correct values
void set_face_normal(inout Hit h, const Ray r, const vec3 outward_normal){
    h.front_face = dot(r.dir,outward_normal) < 0;
    if(h.front_face){
        h.normal = outward_normal;
    }else{
        h.normal = -outward_normal;
    }
}

// ------------ Spheres functions --------------
// Returns true if the ray colides with the sphere
// If it hits it fills out th hit record
bool hit_sphere(const Sphere s, const Interval ray_t, const Ray r, out Hit rec){
    vec3 oc = s.pos - r.orig;
    float a = dot(r.dir,r.dir);
    float h = dot(r.dir, oc);
    float c = dot(oc,oc) - s.r*s.r;
    float discriminant = h*h - a*c;
    if (discriminant < 0) {
        return false;
    } 

    float srtd = sqrt(discriminant);

    float root = (h - srtd) / a;
    if(!surrounds(ray_t,root)){
        root = (h + srtd) / a;
        if(!surrounds(ray_t,root)){
            return false;
        }
    }

    rec.t = root;
    rec.p = at(r,root);
    rec.mat = s.mat;
    vec3 outward_normal = (rec.p - s.pos) / s.r;
    set_face_normal(rec, r, outward_normal);

    return true;
}

// ------------ Scene functions --------------
// Calculates the hit record for the ray
// ray_tmin and ray_tmax to be investigated
bool hit_scene(const Ray r, const Interval ray_t, inout Hit rec){
    Hit temp_rec;
    bool hit_anything = false;
    float closest_so_far = ray_t.maxV;

    // For every sphere in the scene
    for(int i = 0; i< spheres.length(); i++){
        if(hit_sphere(spheres[i],ray_t,r,temp_rec)){
            hit_anything = true;
            if(closest_so_far > temp_rec.t){
                closest_so_far = temp_rec.t;
                rec = temp_rec;
            }
        }
    }

    return hit_anything;
}

// Returns true if ray has hit anything
bool shadow_ray(const Ray r){
    Hit h;
    Interval i = Interval(0.005, PINF);
    return hit_scene(r,i,h);
}


// ------------ Skybox functions --------------

// Skybox variation for a nice and blue radiant day at the park
vec4 skybox_color_day(Ray r) {
    const vec3 sun_dir = vec3(-0.33, 0.67, -0.67);
    const vec4 sun_color = vec4(1.0);
    const float sun_size = 0.999;
    const float light_bleed = 0.0003;
    const vec4 horizon_color = vec4(0.231, 0.756, 0.945, 1.0);
    const vec4 zenith_color = vec4(1.0);

    vec3 dir_unit = normalize(r.dir);
    float a = 0.5 * (dir_unit.y + 1.0); 
    vec4 sky_gradient = mix(horizon_color, zenith_color, a);

    float sun_dot = dot(sun_dir, dir_unit);
    float sun_mask = smoothstep(sun_size - light_bleed, sun_size + light_bleed, sun_dot);

    return mix(sky_gradient, sun_color, sun_mask);
}

// Skybox variation for moody and relaxed moon light shaped sky
vec4 skybox_color_night(Ray r) {
    const vec3 moon_dir = normalize(vec3(0.33, 0.67, -0.67));
    const vec4 moon_color = vec4(0.9, 0.9, 0.8, 1.0); 
    const float moon_size = 0.999;
    const float light_bleed = 0.0003;
    const vec4 horizon_color = vec4(0.0);
    const vec4 zenith_color = vec4(0.005, 0.005, 0.005, 1.0); 

    vec3 dir_unit = normalize(r.dir);
    float a = 0.5 * (dir_unit.y + 1.0); 
    vec4 sky_gradient = mix(horizon_color, zenith_color, a);

    float moon_dot = dot(moon_dir, dir_unit);
    float moon_mask = smoothstep(moon_size - light_bleed, moon_size + light_bleed, moon_dot);

    return mix(sky_gradient, moon_color, moon_mask);
}

// Skybox variation for just a white sky
vec4 skybox_color_white(Ray r){
    return vec4(1.0);
}

// Skybox variation for just a black sky
vec4 skybox_color_black(Ray r){
    return vec4(0.0);
}

// Color of the skybox where the ray is pointing to
vec4 skybox_color(Ray r) {
    return skybox_color_night(r);
}


// ------------ Lighting functions --------------
// Strength based importance sampling. Returns radiance of the light 
vec3 sample_light(vec3 point, vec3 normal, out vec3 L, out float pdf){
    if (pc.total_lights == 0 || pc.lights_strength_sum <= 0.0) {
        pdf = 0.0;
        return vec3(0.0);
    }
    // Choose light to sample with ponderated sampling in strength and a binary search
    float rand_strength = random() * pc.lights_strength_sum;
    int low = 0, high = pc.total_lights - 1;
    while (low < high) {
        int mid = (low + high) / 2;
        if (rand_strength <= lights[mid].accumulated_str) {
            high = mid;
        } else {
            low = mid + 1;
        }
    }
    Light picked_light = lights[low];

    switch(picked_light.type){
        case AMBIENT:
            L = random_vec_on_hemisphere(normal);
            pdf = 1 / 2.0 / PI;
            return picked_light.color_str.rgb;
            break;
        case SPHERE:
            vec3 center = picked_light.pos_angle_aux.xyz;
            float radius = picked_light.pos_angle_aux.w;
            vec3 center_to_point = point-center;
            vec3 sphere_point = random_vec_on_hemisphere(normalize(center_to_point)) * radius + center;
            vec3 point_to_spoint = sphere_point-point;
            float d_to_spoint = length(point_to_spoint);
            L = normalize(point_to_spoint);
            Ray s_ray = Ray(point,L);
            Hit h;
            Interval i = Interval(0.005, PINF);
            if(hit_scene(s_ray,i,h)){
                //if(abs(d_to_spoint - h.t) < 0.1){
                if(true){
                    float d2 = d_to_spoint*d_to_spoint;
                    pdf = 1 / 2.0 / PI;
                    return clamp(picked_light.color_str.rgb  / d2,0.0,1.0);
                }
            }
            L = normal;
            pdf = 0.00001;
            return vec3(0.0);
            break;
        case POINT:

            break;
        case DIRECTIONAL:
            // If surface does not cover the directional light
            vec3 light_dir = -picked_light.pos_angle_aux.xyz;
            if(dot(normal,light_dir) > 0.0){
                Ray s_ray = Ray(point,light_dir);
                if(!shadow_ray(s_ray)){
                    L = light_dir;
                    pdf = 1.0;
                    return picked_light.color_str.rgb;
                }
            }
            L = normal;
            pdf = 0.00001;
            return vec3(0.0);
            break;
        case CONE:

            break;
        case AREA:

            break;
        default:

            break;
    }

    return vec3(1.0);
}


// ------------ Material functions --------------
int sample_lobe(const Material mat) {

    if (mat.albedo.a < 1.0 &&  mat.albedo.a < random()) {
        return TRANSPARENT;
    }

    if (mat.emission_color.a > 0.0) {
        return EMISSION;
    }
    

    float dielectric        = 1.0 - mat.metallic;
    float p_diffuse         = dielectric * (1.0 - mat.subsurface.a) * (1.0 - mat.trs_weight);
    float p_subsurface      = dielectric * mat.subsurface.a * (1.0 - mat.trs_weight);
    float p_specular        = mat.specular_tint.a * dielectric;

    // 2. Cálculo directo sin variables intermedias
    float randVal = random() * (p_diffuse + p_subsurface + p_specular + mat.metallic + mat.trs_weight);

    // 3. Selección directa (sin restas paso a paso)
    if (randVal < p_diffuse) {
        return DIFFUSE;
    }
    randVal -= p_diffuse;

    if (randVal < p_subsurface) {
        return SUBSURFACE;
    }
    randVal -= p_subsurface;

    if (randVal < p_specular) {
        return SPECULAR;
    }
    randVal -= p_specular;

    if (randVal < mat.metallic) {
        return METAL;
    }

    return TRANSMISSION;
}


float power_heuristics(float a, float b){
    float x = a*a;
    float y = b*b;
    return x / (x+y);
}

// Fresnel-Schlick aproximation to reflectance
float reflectance(float cos_theta, float ref_idx) {
    float F0 = (1.0 - ref_idx) / (1.0 + ref_idx);
    F0 = F0 * F0;
    return F0 + (1.0 - F0) * pow(1.0 - cos_theta, 5.0);
}

// Normal distribution function. GGX
float ggx_distribution(float alpha, vec3 N, vec3 H){
    float alpha_squared = alpha * alpha;
    float dot_product = clamp(dot(N, H), 0.0, 1.0);
    float x = dot_product * dot_product * (alpha_squared - 1.0) + 1.0;
    return alpha_squared / (PI * x * x);
}

// Geometry shadowing function. Schilick-Beckmann
float G1_CT(vec3 X, vec3 N, float alpha){
    float k = alpha / 2.0;
    float dot_product = max(0.0,dot(N,X));
    return dot_product / max(0.000001,(dot_product*(1.0 - k) + k));
}

// Converts spherical coordinates (theta, phi) to a 3D cartesian unit vector
vec3 sphere_to_cartesian(float theta, float phi){
    float sin_t = sin(theta);
    return vec3(
        sin_t*cos(phi),
        sin_t*sin(phi),
        cos(theta)
    );
}

// Aligns a local direction vector X to world space using normal N as reference
vec3 align_to_world(vec3 X, vec3 N){
    vec3 up;
    // Aproximation for speed, not 100% orthonormal when N is near +Z
    if(N.z > 0.9999){
        up = vec3(1.0,0.0,0.0);
    }else{
        up = vec3(0.0,0.0,1.0);
    }

    vec3 T = normalize(cross(up,N));
    vec3 B = cross(N,T);

    return T*X.x + B*X.y + N*X.z;
}

// Samples a GGX-distributed microfacet normal and returns the reflected direction
vec3 sample_ggx(Material mat, vec3 V, vec3 N){
    float e1 = random(), e2 = random();
    float alpha2 = mat.roughness * mat.roughness;
    float theta = acos(sqrt( (1.0 - e1) / (1.0 + (alpha2 - 1.0)*e1) ));
    float phi = 2.0 * PI * e2;

    vec3 H_tan = sphere_to_cartesian(theta, phi);
    vec3 H = align_to_world(H_tan,N);

    return reflect(-V,H);
}

float pdf_ggx(float D, vec3 V, vec3 N, vec3 H){
    return (D * dot(N,H)) / max(4.0 * dot(V,H), 1e-5);
}

// Return whats the tint that mat gives from L to V when it bounces on it
vec3 eval_mat(Material mat, vec3 L, vec3 V, Hit rec, out float pdf){
    vec3 N = rec.normal;
    vec3 H = normalize(L+V);
    float NdotL = clamp(dot(L,N),0.0,1.0);
    float NdotV = clamp(dot(V,N),0.0,1.0);
    
    float ri = rec.front_face ? (1.0/mat.ior) : mat.ior;
    float ks = clamp(reflectance(NdotV, ri), 0.0, 1.0);
    float kd = 1.0 - ks;

    vec3 f_diffuse = mat.albedo.xyz / PI;

    float alpha = mat.roughness * mat.roughness;
    float D = ggx_distribution(alpha,N,H);
    float G = G1_CT(L,N,alpha) * G1_CT(V,N,alpha);
    float F = ks;
    
    vec3 f_specular = mat.specular_tint.rgb * D*G*F / max(0.00001,(4.0*NdotV*NdotL));

    float pdf_specular = pdf_ggx(D,V,N,H);
    float pdf_diffuse = NdotL / PI;
    pdf = kd * pdf_diffuse + ks * pdf_specular;
    pdf = clamp(pdf, 0.0, 1.0);

    return kd*f_diffuse + f_specular;
}

// Samples an outgoing light direction from the material
vec3 sample_mat(Material mat, vec3 V, vec3 N){
    return sample_ggx(mat,V,N);
}


// Computes direct lighting contribution at a hit point
vec3 direct_light(Hit rec, Ray ray, float pdf){
    vec3 L_emission, L_dir, fr;
    float cos_theta, light_pdf, mat_pdf;

    L_emission = sample_light(rec.p,rec.normal,L_dir,light_pdf);
    cos_theta = max(0.0,dot(rec.normal,L_dir));
    fr = eval_mat(materials[rec.mat], L_dir, -ray.dir, rec, mat_pdf);

    pdf = power_heuristics(light_pdf,mat_pdf);

    return clamp(L_emission * fr * cos_theta / pdf, 0.0, 1.0);
}


// Calculates the color of the ray by tracing it with the scene
vec4 ray_color(Ray r){
    vec3 color = vec3(0.0);
    vec3 attenuation = vec3(1.0);
    Hit h;
    
    for (int bounce = 0; bounce <= max_bounces; bounce++) {
        if (hit_scene(r, Interval(0.005, PINF), h)) {
            Material mat = materials[h.mat];

            // If material is emissive stop casting
            if(mat.emission_color.a > 0.0){
                color += attenuation * mat.emission_color.rgb;
                break;
            }

            // Get the direct light contribution
            float light_pdf;
            vec3 debug = direct_light(h,r,light_pdf);
            color += debug * attenuation; 

            // Last iteration doesn't need to calculate attenuation or next ray
            if(bounce < max_bounces){
                // Get the indirect light contribution
                vec3 bounce_dir = sample_mat(mat, -r.dir, h.normal);
                float mat_pdf;
                vec3 fr = eval_mat(mat,bounce_dir,-r.dir,h,mat_pdf);
                float cos_theta = max(0.0, dot(h.normal, bounce_dir));
                attenuation *= max(vec3(0.0),fr * cos_theta / max(0.00001,mat_pdf));

                // Prepare next ray to cast
                r.orig = h.p;
                r.dir = bounce_dir;
            }
        } else {
            // Ray has hit the skybox
            color += attenuation * skybox_color(r).rgb;
            return vec4(clamp(color, 0.0, 1.0),1.0);
        }
    }

    return vec4(clamp(color, 0.0, 1.0),1.0);
}

// Generates a ray pointing to the pixel this thread is assign with a random half-pixel (square) offset
Ray get_ray(){
    vec2 pixelCoordsOffset = pixelCoords + sample_square();

    float ndcX = 2.0 * pixelCoordsOffset.x / imageSize.x - 1.0;
    float ndcY = 1.0 - 2.0 * pixelCoordsOffset.y / imageSize.y;

    vec3 rayDirCameraSpace = normalize(vec3(
        ndcX * aspectRatio * ubo.camera.tanHalfFOV,
        ndcY * ubo.camera.tanHalfFOV,
        -1.0
    ));

    vec3 rayDir = normalize(vec3(ubo.camera.viewInv * vec4(rayDirCameraSpace, 0.0)));

    Ray ray;
    ray.orig = ubo.camera.position;
    ray.dir = rayDir;

    return ray;
}



void main() {

    // RNG seed, will change after each generation of number
    seed = hash(uint(pc.time)*1920) 
            ^ hash(pc.frameCount)
            ^ hash(uint(pixelCoords.x + pixelCoords.y * 1920));
    /*hash(floatBitsToUint(ubo.camera.view[0][0])) 
          ^ hash(floatBitsToUint(ubo.camera.view[1][1])) 
          ^ hash(floatBitsToUint(ubo.camera.view[2][2])) 
          ^ hash(floatBitsToUint(ubo.camera.view[0][1])) 
          ^ hash(floatBitsToUint(ubo.camera.view[0][2])) 
    */

    vec4 color = vec4(0.0);
    Ray ray;

    for(int i = 0; i < rays_per_pixel; i++){
        ray = get_ray();
        color += ray_color(ray);
    }

    // Calculate color of pixel
    color = color/rays_per_pixel;
    //color = normalize(vec4(random(),random(),random(),0.0)); // Visual rng test

    // Gamma correction
    color = vec4(pow(color.xyz, vec3(1.0/2.2)), 1.0);

    // Frame accumulation
    uint idx = pixelCoords.y * imageSize.x + pixelCoords.x;
    if (pc.reset_frame_accumulation) {
        accumulated_colors[idx] = vec4(0.0);
        sample_counts[idx] = 0;
    }
    accumulated_colors[idx] += color;
    sample_counts[idx] += 1;
    vec4 final_color = accumulated_colors[idx] / max(1, sample_counts[idx]);

    // Store color
    imageStore(outputImage, pixelCoords, final_color.zyxw);
}