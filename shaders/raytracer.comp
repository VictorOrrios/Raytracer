#version 450

// ------------ Struct definitions --------------
struct Camera{
    mat4 view;
    mat4 viewInv;
    mat4 proj;
    mat4 projInv;
    mat4 viewproj;
    vec3 position;
    float tanHalfFOV;
};

struct Ray{
    vec3 orig;
    vec3 dir;
};

struct Sphere{
    vec3 pos; // Coordinates of the center
    float r; // Radius
};

struct Hit{
    vec3 p; // Where it happend
    vec3 normal; // The normal where it hit
    float t; // The distance from the ray origin to the hit
    bool frontFace; // True if hit is to a front facing surface
};

// ------------ External memory layout --------------
layout(set = 0, binding = 0) uniform UniformBufferObject {
    Camera camera;
} ubo;

layout(set = 1, binding = 0, rgba8) uniform writeonly image2D outputImage;

layout(set = 1, std140, binding = 1) buffer ParticleSSBOOut {
    Sphere spheres[];
};

// ------------ Workgroup sizes --------------
layout(local_size_x = 16, local_size_y = 16) in;


// ------------ Ray functions --------------
// Having the length of a hit (t) returns the point where it hit
vec3 at(const Ray r, const float t){
    return r.orig + t*r.dir;
}


// ------------ Hit record functions --------------
// Having the outward facing normal of the surface hit
// updates the record frontFace and normal to correct values
void set_face_normal(inout Hit h, const Ray r, const vec3 outward_normal){
    h.frontFace = dot(r.dir,outward_normal) < 0;
    if(h.frontFace){
        h.normal = outward_normal;
    }else{
        h.normal = -outward_normal;
    }
}

// ------------ Spheres functions --------------
// Returns true if the ray colides with the sphere
// If it hits it fills out th hit record
bool hit_sphere(const Sphere s, const float ray_tmin, const float ray_tmax, const Ray r, out Hit rec){
    vec3 oc = s.pos - r.orig;
    float a = dot(r.dir,r.dir);
    float h = dot(r.dir, oc);
    float c = dot(oc,oc) - s.r*s.r;
    float discriminant = h*h - a*c;
    if (discriminant < 0) {
        return false;
    } 

    float srtd = sqrt(discriminant);

    float root = (h - srtd) / a;
    if(root <= ray_tmin || ray_tmax <= root){
        root = (h + srtd) / a;
        if(root <= ray_tmin || ray_tmax <= root){
            return false;
        }
    }

    rec.t = root;
    rec.p = at(r,root);
    vec3 outward_normal = (rec.p - s.pos) / s.r;
    set_face_normal(rec, r, outward_normal);

    return true;
}

// ------------ Scene functions --------------
// Calculates the hit record for the ray
// ray_tmin and ray_tmax to be investigated
bool hit_scene(const Ray r, const float ray_tmin, const float ray_tmax, inout Hit rec){
    Hit temp_rec;
    bool hit_anything = false;
    float closest_so_far = ray_tmax;

    // For every sphere in the scene
    for(int i = 0; i< spheres.length(); i++){
        if(hit_sphere(spheres[i],ray_tmin,ray_tmax,r,temp_rec)){
            hit_anything = true;
            if(closest_so_far > temp_rec.t){
                closest_so_far = temp_rec.t;
                rec = temp_rec;
            }
        }
    }

    return hit_anything;
}

// Calculates the color of the ray by tracing it with the scene
vec4 ray_color(Ray r){
    Hit h;
    if(hit_scene(r,0,100,h)){
        return vec4(h.normal.z + vec3(1.0,1.0,1.0)* 0.5,1.0);
    }

    vec3 dir_unit = normalize(r.dir);
    float a = 0.5*(dir_unit.y + 1.0);
    return (1.0-a)*vec4(0.286, 0.365, 0.631, 1.0) + a*vec4(1.0, 1.0, 1.0, 1.0);
}



void main() {
    // Enviroment variables
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(outputImage);
    float aspectRatio = float(imageSize.x)/float(imageSize.y);

    // Pixel coordinates to ray direction

    float ndcX = 2.0 * pixelCoords.x / imageSize.x - 1.0;
    float ndcY = 1.0 - 2.0 * pixelCoords.y / imageSize.y;

    vec3 rayDirCameraSpace = normalize(vec3(
        ndcX * aspectRatio * ubo.camera.tanHalfFOV,
        ndcY * ubo.camera.tanHalfFOV,
        -1.0
    ));

    vec3 rayDir = normalize(vec3(ubo.camera.viewInv * vec4(rayDirCameraSpace, 0.0)));

    // Ray of the pixel asigned
    Ray ray;
    ray.orig = ubo.camera.position;
    ray.dir = rayDir;

    // Calculate color of pixel
    vec4 color = ray_color(ray);
    color.w = 1.0; // Solid, no transparency
    
    // Store color
    imageStore(outputImage, pixelCoords, color.zyxw);
}